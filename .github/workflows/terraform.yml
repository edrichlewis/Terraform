name: Terraform CI CD

on:
    workflow_dispatch:
      inputs:
        action:
          type: choice
          description: "Choose an action to perform"
          required: true
          default: "apply"
          options:
            - apply
            - destroy
        target: 
          description: "Specify resources to destroy (comma-separated or 'all' for everything)"    
          required: false
          default: ""

    push:
        branches:
            - main
    pull_request:

jobs: 
    terraform:
        name: Terraform Deploy
        runs-on: ubuntu-latest

        permissions:
          id-token: write
          contents: read

        steps: 
            # Step 1: Checkout the Code to Repository
            - name: Checkout Code
              uses: actions/checkout@v3

            # Step 2: Setup Terraform
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v2
              with: 
                terraform_version: 1.5.0

            # Step 3: Configure AWS Credentials
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v3
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }}
                
            # Step 4: Initialize Terraform
            - name: Terraform Init
              run: terraform init
              working-directory: terraform-ec2

            # Step 5: List Resources
            - name: List Terraform Resources
              run: |
                terraform show -json > state.json
                jq '.values.root_module.resources[].address' state.json | sed 's/^"//;s/"$//' > resource_list.txt
                echo "Available Resources"
                cat resource_list.txt
              working_directory: terraform-ec2

            # Step 6: Terraform Plan or Destroy
            - name: Terraform Plan ot Destroy
              run: |
                if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
                  if [ "${{ github.event.inputs.target }}" == "all" ]; then
                    terraform plan -destroy
                else
                  IFS=',' read -ra TARGETS <<< "${{ github.event.inputs.target}}"
                  for target in "${TARGETS[@]}"; do
                    terraform plan -destroy -target=$target
                  done
                  fi
                else
                  terraform plan
                fi
              working-directory: terraform-ec2
            
            #  run: terraform plan -var-file=terraform.tfvars

            # Step 7: Terraform Apply or Destroy
            - name: Terraform Apply or Destroy
              run: |
                if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
                  if [ "${{ github.event.inputs.target }}" == "all"]; then
                    terraform destroy -auto-approve
                  else
                    IFS=',' read -ra TARGETS <<< "${{ github.event.inputs.target }}"
                    for target in "${TARGETS[@]}"; do
                      terraform destroy -target=$target -auto-approve
                    done
                  fi
                else
                  terraform apply -auto-approve
                fi
              working-directory: terraform-ec2